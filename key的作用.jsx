// 经典面试题 
// 1 react/vue中的key有什么作用，（key的内部原理是什么）
// 2 为什么遍历列表是，key最好不要用index
// 1 虚拟dom中key的作用
//    1）简单地说：key是虚拟dom对象的标识，在更新显示时key起着及其
//    重要的作用
//    2）详细的说：当状态中的数据发生变化时，react会根据【新数据】生成
//    【新的虚拟dom】，随后react进行【新虚拟dom】，【旧虚拟dom】的diff比较
//     比较原则如下
//    a 旧虚拟dom中找到了与新虚拟dom相同的key：
        // （1），若虚拟dom中内容没变，直接使用之前的真实dom
        // （2），若虚拟dom中内容变了，则生成新的真实dom，随后替换掉页面中
        //    之前的真实dom
        //   b 旧虚拟dom中未找到与新虚拟dom相同的key根据数据创建新的真实dom
        //    随后渲染到页面

        //  用index作为key可能引发的问题
        //  1 若对数据进行：逆序添加，逆序删除等破坏顺序操作：
                // 会产生没有必要的真实dom更新 界面效果没问题，但
                // 效率低

        // 2 如果结构中还包含输入类的dom：
        //   会产生错误dom更新  ==》 界面有问题
        
        // 3 注意：如果不存在对数据的逆序添加，逆序删除等破坏顺序操作
        //  仅用于渲染列表进行展示，使用index作为key是没有问题的
        // 
        // 在添加新的数据时 生成的新的虚拟dom如果是放在之前虚拟dom的前面 那么
        // 新生成的虚拟dom  索引index为0 先生成的虚拟dom就会依次加 1 然后会新
        // 的虚拟dom会和旧的虚拟dom比较 因为旧的虚拟dom 索引index 是 0 小张
        // 1 小李 而新生成的是 0 小王 1 小张 2 小李 所以会渲染三次 效率慢
        // 要是原数据2000条添加一条用index为key值得话那么就会渲染你2001次
        // 可以用唯一表示id作为索引值 因为 id 是唯一的 也不会想index那样生成一个
        // 数据 放在前面改变所有数据的index值 造成index新旧虚拟dom对不上  id可以用
        // 数组的长度进行设置 增加一个数据那么 数组的长度就变化了 id 也就变化了 难么就
        // 可以实现id的唯一性 当你添加新数据时 新数据的key就是id而id就是数组的长度 
        // 每一个id还都是唯一的 比如 id：1 2 3 删掉 2 那么 id 1 3 不会变还是原来的key值
        // 只是id为2 的被删掉了   
        //
        // 如果新生成的虚拟dom放在原数据的后面 那么就没有上述的问题了
        // 
